package ClassDiagramDSL.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Attribute_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ClassDiagram_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ClassDiagramRepository_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ClassElement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new EnumElement_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new EnumValue_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new InterfaceElement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Method_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new MethodArgument_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new RelationElement_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x5bec2edb52c5a5adL), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x2821a260f6f18a77L), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x2821a260f6f18a76L), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x5bec2edb52c440dcL), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x46a8aa102bf53eceL), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x46a8aa102bf60fcaL), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x5bec2edb52c61d2dL), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x5bec2edb52c61d43L), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x5bec2edb52c6738eL), MetaIdFactory.conceptId(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x5bec2edb52cfeda0L)).seal();
}
