package ClassDiagramDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_ClassDiagram;
  private ConceptPresentation props_ClassDiagramElement;
  private ConceptPresentation props_ClassDiagramRepository;
  private ConceptPresentation props_ClassElement;
  private ConceptPresentation props_ClassElementMember;
  private ConceptPresentation props_InterfaceElement;
  private ConceptPresentation props_Method;
  private ConceptPresentation props_MethodArgument;
  private ConceptPresentation props_RelationElement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.ClassDiagram:
        if (props_ClassDiagram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClassDiagram = cpb.create();
        }
        return props_ClassDiagram;
      case LanguageConceptSwitch.ClassDiagramElement:
        if (props_ClassDiagramElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ClassDiagramElement = cpb.create();
        }
        return props_ClassDiagramElement;
      case LanguageConceptSwitch.ClassDiagramRepository:
        if (props_ClassDiagramRepository == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ClassDiagramRepository");
          props_ClassDiagramRepository = cpb.create();
        }
        return props_ClassDiagramRepository;
      case LanguageConceptSwitch.ClassElement:
        if (props_ClassElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClassElement = cpb.create();
        }
        return props_ClassElement;
      case LanguageConceptSwitch.ClassElementMember:
        if (props_ClassElementMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ClassElementMember = cpb.create();
        }
        return props_ClassElementMember;
      case LanguageConceptSwitch.InterfaceElement:
        if (props_InterfaceElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InterfaceElement = cpb.create();
        }
        return props_InterfaceElement;
      case LanguageConceptSwitch.Method:
        if (props_Method == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Method = cpb.create();
        }
        return props_Method;
      case LanguageConceptSwitch.MethodArgument:
        if (props_MethodArgument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MethodArgument = cpb.create();
        }
        return props_MethodArgument;
      case LanguageConceptSwitch.RelationElement:
        if (props_RelationElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RelationElement");
          props_RelationElement = cpb.create();
        }
        return props_RelationElement;
    }
    return null;
  }
}
