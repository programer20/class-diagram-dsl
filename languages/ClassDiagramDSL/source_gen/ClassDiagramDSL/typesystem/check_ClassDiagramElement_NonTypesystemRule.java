package ClassDiagramDSL.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class check_ClassDiagramElement_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ClassDiagramElement_NonTypesystemRule() {
  }
  public void applyRule(final SNode classDiagramElement, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode element : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(classDiagramElement, CONCEPTS.ClassDiagram$Mj, false, false), LINKS.classDiagramElements$$pm0))) {
      if (element != classDiagramElement & SPropertyOperations.getString(element, PROPS.name$tAp1).equals(SPropertyOperations.getString(classDiagramElement, PROPS.name$tAp1))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(classDiagramElement, "Name must be unique", "r:e598e494-c9b1-492c-a1e4-ed8e372349af(ClassDiagramDSL.typesystem)", "2513636397829014928", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ClassDiagramElement$P;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ClassDiagram$Mj = MetaAdapterFactory.getConcept(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x2821a260f6f18a77L, "ClassDiagramDSL.structure.ClassDiagram");
    /*package*/ static final SConcept ClassDiagramElement$P = MetaAdapterFactory.getConcept(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x2821a260f6f23d2aL, "ClassDiagramDSL.structure.ClassDiagramElement");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink classDiagramElements$$pm0 = MetaAdapterFactory.getContainmentLink(0x1c18981f779a4434L, 0xa3572f05772a8d5eL, 0x2821a260f6f18a77L, 0x2821a260f6f23d2dL, "classDiagramElements");
  }
}
